#!/sbin/sh

tmp=/tmp/kernel-flasher

console=$(cat /tmp/console)
[ "$console" ] || console=/proc/$$/fd/1

cd "$tmp"
. config.sh

default_prop=$ramdisk/default.prop
build_prop=/system/build.prop
cmdline=$split_img/boot.img-cmdline

[ -f "$default_prop" ] && found_prop=true
[ -f "$build_prop" ] && found_build_prop=true

print() {
	if [ "$1" ]; then
		echo "ui_print -- $1" > "$console"
	else
		echo "ui_print  " > "$console"
	fi
	echo
}

abort() {
	[ "$1" ] && print "Error: $1"
	exit 1
}

# setperm <directory permissions> <file permissions> <directory>
setperm() {
	find "$3" -type d -exec chmod "$1" {} \;
	find "$3" -type f -exec chmod "$2" {} \;
}

# replace_file <old file> <new file> (preserving metadata)
replace_file() {
	cat "$2" > "$1" || return 1
	rm -f "$2"
}

# replace_line <file> <line match pattern> <replacement line>
replace_line() {
	sed -i "s/[[:space:]]*$2[[:space:]]*$/$3/" "$1"
}

# insert_after_last <file> <line match pattern> <inserted line>
insert_after_last() {
	grep -q "^$3$" "$1" || {
		line=$(($(grep -n "^[[:space:]]*$2[[:space:]]*$" "$1" | tail -1 | cut -d: -f1) + 1))
		sed -i "${line}i$3" "$1"
	}
}

# setcmdline <key> <value>
setcmdline() {
	grep -q "\b$1=" "$cmdline" && sed -i "s|\b$1=.*\b|$1=$2|g" "$cmdline" && return
	sed -i "1 s/$/ $1=$2/" "$cmdline"
}

# setprop <prop> <value>
setprop() {
	$found_prop || return
	if grep -q "^[[:space:]]*$1[[:space:]]*=" "$default_prop"; then
		sed -i "s/^[[:space:]]*$1[[:space:]]*=.*$/$1=$2/g" "$default_prop"
	else
		echo "$1=$2" >> "$default_prop"
	fi
}

# delprop <prop>
delprop() {
	$found_prop && sed -i "/^[[:space:]]*$1[[:space:]]*=/d" "$default_prop"
	$found_build_prop && sed -i "/^[[:space:]]*$1[[:space:]]*=/d" "$build_prop"
}

# disable_service <service name>
# this only sets a service to disabled, it won't prevent it from being started manually
disable_service() {
	for rc in "$ramdisk"/*.rc; do
		grep -q "^[[:space:]]*service[[:space:]]\+$1\b" "$rc" || continue
		echo "Found service $1 in $rc"
		awk -vsc_name="$1" '
			$1 == "service" || $1 == "on" { in_sc = 0 }
			in_sc && $1 == "disabled" { next }
			{ print }
			$1 == "service" && $2 == sc_name {
				print "    disabled"
				in_sc = 1
			}
		' "$rc" > "$rc-"
		replace_file "$rc" "$rc-"
	done
}

# remove_service <service name>
# this comments out a service entry entirely, as well as commands referencing it
remove_service() {
	for rc in "$ramdisk"/*.rc; do
		grep -q "^[[:space:]]*\(service\|start\|stop\|restart\)[[:space:]]\+$1\b" "$rc" || continue
		echo "Found service $1 in $rc"
		awk -vsc_name="$1" '
			!NF || $1 ~ /^#/ { print; next }
			$1 == "service" || $1 == "on" { in_sc = 0 }
			$1 == "service" && $2 == sc_name { in_sc = 1 }
			in_sc || ($2 == sc_name && ($1 == "start" || $1 == "stop" || $1 == "restart")) { printf "#" }
			{ print }
		' "$rc" > "$rc-"
		replace_file "$rc" "$rc-"
	done
}

cd "$ramdisk"
